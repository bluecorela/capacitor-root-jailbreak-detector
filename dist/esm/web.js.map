{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { DeviceInfo, RootJailBreakDetectorPlugin } from './definitions';\n\nexport class RootJailBreakDetectorWeb extends WebPlugin implements RootJailBreakDetectorPlugin {\n  isRunningOnEmulator(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n  async isRooted(): Promise<{ isRooted: boolean }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isRootedWithBusyBox(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isRootedWithEmulator(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isRootedWithBusyBoxWithEmulator(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isDetectRootManagementAppsRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isDetectPotentiallyDangerousAppsRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isTestKeysRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isCheckForBusyBoxBinaryRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isCheckForSuBinaryRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isCheckSuExistsRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isCheckForRWPathsRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isCheckForDangerousPropsRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isCheckForRootNativeRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isDetectRootCloakingAppsRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isSelinuxFlagInEnabled(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isExistBuildTagsRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async doesSuperuserApkExistRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isExistSUPathRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isCheckDirPermissionsRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isCheckExecutingCommandsRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isCheckInstalledPackagesRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isCheckforOverTheAirCertificatesRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async isRunningOnEmulatorRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async simpleCheckEmulatorRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async simpleCheckSDKBF86Rooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async simpleCheckQRREFPHRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async simpleCheckBuildRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async checkGenymotionRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async checkGenericRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n  \n  async checkGoogleSDKRooted(): Promise<{ isRooted: boolean; }> {\n    throw new Error('Method not implemented.');\n  }\n\n  async getDeviceInfo(): Promise<DeviceInfo> {\n    throw new Error('Method not implemented.');\n  }\n}\n"]}